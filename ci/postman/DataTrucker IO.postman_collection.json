{
	"info": {
		"_postman_id": "487675aa-069a-47ef-bc46-d4b14abb7f2a",
		"name": "DataTrucker IO",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "registrations",
			"item": [
				{
					"name": "Pre Registration Status Code Checks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Health Status before registration\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.dbinitialized).to.eql(false);    \r",
									"    pm.expect(jsonData.data.db).to.eql(true);\r",
									"    pm.expect(jsonData.data.cache).to.eql(true);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/v1/statuschecks/healthcheck",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"statuschecks",
								"healthcheck"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre Registration Initiaization Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Check Status before initialization\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.isIntialized).to.eql(false);  });\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/v1/statuschecks/is-intialized",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"statuschecks",
								"is-intialized"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initialize the DB with a wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(false);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Wrong password\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errorMsg');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"godmode\",\r\n\t\"password\": \"Secre t@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/statuschecks/intialize",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"statuschecks",
								"intialize"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initialize the DB with a default Admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Initialize user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(\"Admin user created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"godmode\",\r\n\t\"password\": \"Secret@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/statuschecks/intialize",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"statuschecks",
								"intialize"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initialize the DB with a default Admin a second time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(false);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Double Intialization\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errorMsg');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"godmode\",\r\n\t\"password\": \"Secret@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/statuschecks/intialize",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"statuschecks",
								"intialize"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Registration Status Code Checks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Health Status post Checks\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.dbinitialized).to.eql(true);    \r",
									"    pm.expect(jsonData.data.db).to.eql(true);\r",
									"    pm.expect(jsonData.data.cache).to.eql(true);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/v1/statuschecks/healthcheck",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"statuschecks",
								"healthcheck"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Registration Initiaization Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Health Status post Checks\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.isIntialized).to.eql(true);  });\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/v1/statuschecks/is-intialized",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"statuschecks",
								"is-intialized"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "login",
			"item": [
				{
					"name": "Login Failed Schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.reqCompleted).to.eql(false);",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));",
									"    pm.expect(jsonData).to.have.property('reqID');",
									"});",
									"",
									"pm.test(\"Login Schema Check\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('errorMsg');",
									"",
									"});",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"godmode\",\n\t\"password\": \"Secr et@123\",\n\t\"tenant\": \"Admin\",\n\t\"type\": \"local\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						},
						"description": "Extends the life of a given token "
					},
					"response": []
				},
				{
					"name": "Login Failed Schema Incorrect password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Password Check\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status').to.eql(false);",
									"",
									"});",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"godmode\",\n\t\"password\": \"Secret@133\",\n\t\"tenant\": \"Admin\",\n\t\"type\": \"local\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						},
						"description": "Extends the life of a given token "
					},
					"response": []
				},
				{
					"name": "Login Failed Schema Incorrect Tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Tenant Check\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status').to.eql(false);",
									"",
									"});",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"godmode\",\n\t\"password\": \"Secret@123\",\n\t\"tenant\": \"AdminNonExistant\",\n\t\"type\": \"local\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						},
						"description": "Extends the life of a given token "
					},
					"response": []
				},
				{
					"name": "Login Failed Schema Incorrect userName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login UserName Check\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status').to.eql(false);",
									"",
									"});",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"godmodeNonExistant\",\n\t\"password\": \"Secret@123\",\n\t\"tenant\": \"Admin\",\n\t\"type\": \"local\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						},
						"description": "Extends the life of a given token "
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"pm.environment.set(\"Token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"godmode\",\n\t\"password\": \"Secret@123\",\n\t\"tenant\": \"Admin\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						},
						"description": "Extends the life of a given token "
					},
					"response": []
				},
				{
					"name": "Validate Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Validate User\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data).to.have.property('username').to.eql(\"godmode\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/api/v1/validate",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"validate"
							]
						},
						"description": "Extends the life of a given token "
					},
					"response": []
				},
				{
					"name": "Validate Login Incorrect Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Invalid Validate User\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status').to.eql(false);;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/api/v1/validate",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"validate"
							]
						},
						"description": "Extends the life of a given token "
					},
					"response": []
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "Get list of users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Get List of  User\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data[0]).to.have.property('username');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/v1/users",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of user mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Get Admin User Mapping\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data).to.have.property('Tenant_Author');\r",
									"    pm.expect(jsonData.data.Tenant_Author).to.have.property('Admin').to.eql(true);    \r",
									"    pm.expect(jsonData.data.Tenants).to.have.property('Admin').to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/v1/users/userroles/godmode",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"userroles",
								"godmode"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a User Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Validate User\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(\"User Created: userTruckerWrite\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"userTruckerWrite\",\r\n  \"password\": \"Secret@123\",\r\n  \"enabled\": false,\r\n  \"asset\": \"secondasset\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/users",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of specific user asset check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Get List of  User\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data[0]).to.have.property('username');\r",
									"    pm.expect(jsonData.data[0]).to.have.property('asset').to.eql(\"secondasset\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/v1/users?username=userTruckerWrite",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "username",
									"value": "userTruckerWrite"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a User Create duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(false);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Validate User\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errorMsg');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"userTruckerWrite\",\r\n  \"password\": \"Secret@123\",\r\n  \"enabled\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/users",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a User Read tenant tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Validate User\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(\"User Created: userTruckerRead\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"userTruckerRead\",\r\n  \"password\": \"Secret@123\",\r\n  \"enabled\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/users",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a User Delete tenant trucker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Validate User\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(\"User Created: userTruckerDelete\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"userTruckerDelete\",\r\n  \"password\": \"Secret@123\",\r\n  \"email\": \"userTruckerDelete@gmail.com\",\r\n  \"enabled\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/users",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a User Delete tenant trucker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Validate User\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(\"User Updated: userTruckerDelete\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Secret@123\",\r\n  \"emailid\": \"userTruckerDelete@gmail.com\",\r\n  \"enabled\": true,\r\n  \"asset\": \"first asset\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/users/userTruckerDelete",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"userTruckerDelete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of specific user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Get List of  User\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data[0]).to.have.property('username');\r",
									"    pm.expect(jsonData.data[0]).to.have.property('asset').to.eql(\"first asset\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/v1/users?username=userTruckerDelete",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "username",
									"value": "userTruckerDelete"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete specific user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Delete specific user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data).to.eql('User Deleted: userTruckerDelete');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/v1/users/userTruckerDelete",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"userTruckerDelete"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "groups",
			"item": [
				{
					"name": "Get list of groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Get list of groups\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data[0]).to.have.property('groupname');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/v1/groups",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Read groups tenant trucker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Create a Read groups tenant trucker\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(\"Group Created: ReadGroup\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n              \"groupname\": \"ReadGroup\",\r\n              \"level\": \"Tenant_Reader\",\r\n              \"tenantname\": \"Trucker\",\r\n              \"enabled\": true,\r\n              \"type\":\"local\",\r\n              \"asset\": \"Group Read Asset\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/groups",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Write groups tenant trucker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Create a Write groups tenant trucker\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(\"Group Created: WriteGroup\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n              \"groupname\": \"WriteGroup\",\r\n              \"level\": \"Tenant_Author\",\r\n              \"tenantname\": \"Trucker\",\r\n              \"enabled\": true,\r\n              \"type\":\"local\",\r\n              \"asset\": \"Group ReadAsset\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/groups",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Write groups tenant trucker for second tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Create a Write groups tenant trucker\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(\"Group Created: WriteGroup2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n              \"groupname\": \"WriteGroup2\",\r\n              \"level\": \"Tenant_Author\",\r\n              \"tenantname\": \"Trucker2\",\r\n              \"enabled\": true,\r\n              \"type\":\"local\",\r\n              \"asset\": \"Group ReadAsset\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/groups",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Duplicate Write groups tenant trucker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(false);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Create a Duplicate Write groups tenant trucker\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errorMsg');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n              \"groupname\": \"WriteGroup\",\r\n              \"level\": \"Tenant_Reader\",\r\n              \"tenantname\": \"Trucker\",\r\n              \"enabled\": true,\r\n              \"type\":\"local\",\r\n              \"asset\": \"Group ReadAsset\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/groups",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Delete groups tenant trucker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Create a Delete groups tenant trucker\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(\"Group Created: DeleteGroup\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n              \"groupname\": \"DeleteGroup\",\r\n              \"level\": \"Tenant_Reader\",\r\n              \"tenantname\": \"Trucker\",\r\n              \"enabled\": true,\r\n              \"type\":\"local\",\r\n              \"asset\": \"Group DeleteGroupAsset\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/groups",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of specific user asset check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Get list of specific user asset check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data[0]).to.have.property('groupname');\r",
									"    pm.expect(jsonData.data[0]).to.have.property('asset').to.eql(\"Group Read Asset\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/v1/groups?groupname=ReadGroup",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"groups"
							],
							"query": [
								{
									"key": "groupname",
									"value": "ReadGroup"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a User Delete tenant trucker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Update a User Delete tenant trucker\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(\"Group Updated: DeleteGroup\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n        \"level\": \"Tenant_Author\",\r\n        \"tenantname\": \"DeleteGroup\",\r\n        \"enabled\": true,\r\n        \"asset\": \"Group DeleteGroupAsset2\",\r\n        \"type\": \"local\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/groups/DeleteGroup",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"groups",
								"DeleteGroup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List of tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Get List of tenants\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.have.lengthOf(4);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/v1/groups/tenants",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"groups",
								"tenants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of specific user asset check Delete group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Get list of specific user asset check Delete group\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data[0]).to.have.property('groupname');\r",
									"    pm.expect(jsonData.data[0]).to.have.property('asset').to.eql(\"Group DeleteGroupAsset2\");\r",
									"    pm.expect(jsonData.data[0]).to.have.property('level').to.eql(\"Tenant_Author\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/v1/groups?groupname=DeleteGroup",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"groups"
							],
							"query": [
								{
									"key": "groupname",
									"value": "DeleteGroup"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete specific user Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Delete specific user Copy\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data).to.eql('Group Deleted: DeleteGroup');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/v1/groups/DeleteGroup",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"groups",
								"DeleteGroup"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "usermapping",
			"item": [
				{
					"name": "Add user to a group : user doesnt exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Add user to a group : user doesnt exist\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(\"Username or Group doesnt exist\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"user3\",\r\n\t\"groupname\": \"Administrators\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/users/addusertogroup",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"addusertogroup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user to a group : group doesnt exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Add user to a group : group doesnt exist\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(\"Username or Group doesnt exist\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerWrite\",\r\n\t\"groupname\": \"AdminDummy\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/users/addusertogroup",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"addusertogroup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user to a group Write",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Add user to a group Write\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(\"User Mapping Added: userTruckerWrite into group WriteGroup\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerWrite\",\r\n\t\"groupname\": \"WriteGroup\",\r\n    \"asset\": \"group mapping asset\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/users/addusertogroup",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"addusertogroup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user to a group Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Add user to a group Read\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(\"User Mapping Added: userTruckerRead into group ReadGroup\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerRead\",\r\n\t\"groupname\": \"ReadGroup\",\r\n    \"asset\": \"group mapping asset\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/users/addusertogroup",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"addusertogroup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user to a group tenant2 ,, who only has read in tenant1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Add user to a group Read\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(\"User Mapping Added: userTruckerRead into group WriteGroup2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerRead\",\r\n\t\"groupname\": \"WriteGroup2\",\r\n    \"asset\": \"group mapping asset\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/users/addusertogroup",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"addusertogroup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get usermapping List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"MappingAsset\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).to.have.property('MappingAsset').to.eql(\"group mapping asset\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/users/usergrouplisting?username=userTruckerRead",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"usergrouplisting"
							],
							"query": [
								{
									"key": "username",
									"value": "userTruckerRead"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user to a group Read Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Add user to a group Read\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(\"User Mapping Added: userTruckerRead into group Administrators\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerRead\",\r\n\t\"groupname\": \"Administrators\",\r\n    \"asset\": \"group mapping asset Delete \"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/users/addusertogroup",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"addusertogroup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get usermapping List Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"MappingAsset\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).to.have.property('MappingAsset').to.eql(\"group mapping asset Delete \");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody)\r",
									"console.log(jsonData.data[0].id)\r",
									"pm.environment.set(\"Deletegroup\", jsonData.data[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/users/usergrouplisting?username=userTruckerRead&groupname=Administrators",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"usergrouplisting"
							],
							"query": [
								{
									"key": "username",
									"value": "userTruckerRead"
								},
								{
									"key": "groupname",
									"value": "Administrators"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Admin Mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"MappingAsset\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.eql(\"User Mapping Deleted\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/users/deleteuserfromgroup/{{Deletegroup}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"deleteuserfromgroup",
								"{{Deletegroup}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "loginchecks",
			"item": [
				{
					"name": "Attempt login on wrong tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Schema Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status').to.eql(false);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerRead\",\r\n\t\"password\": \"Secret@123\",\r\n\t\"tenant\": \"Admin\",\r\n\t\"type\": \"local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt login on disable user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Schema Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status').to.eql(false);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerWrite\",\r\n\t\"password\": \"Secret@123\",\r\n\t\"tenant\": \"Trucker\",\r\n\t\"type\": \"local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable a User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Validate User\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(\"User Updated: userTruckerWrite\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Secret@123\",\r\n  \"emailid\": \"userTruckerDelete@gmail.com\",\r\n  \"enabled\": true,\r\n  \"asset\": \"first asset\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/users/userTruckerWrite",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"userTruckerWrite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt login on user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status').to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('token');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerWrite\",\r\n\t\"password\": \"Secret@123\",\r\n\t\"tenant\": \"Trucker\",\r\n\t\"type\": \"local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "util-sentiment",
			"item": [
				{
					"name": "login on tenant user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status').to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('token');\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody)\r",
									"pm.environment.set(\"Token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerWrite\",\r\n\t\"password\": \"Secret@123\",\r\n\t\"tenant\": \"Trucker\",\r\n\t\"type\": \"local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed to create a resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resourcet\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contain(\"POST-Trucker-sentiment.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourcename\": \"sentiment\",\r\n    \"type\": \"Util-Sentiment\",\r\n    \"restmethod\": \"POST\",\r\n          \"options\": {\r\n            \"extras\": {\r\n              \"cats\": 5,\r\n              \"amazing\": 2,\r\n              \"tasteless\": -10,\r\n              \"Wanted\": 10\r\n            }\r\n        },\r\n    \"validations\": {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n            \"statement\": {\r\n                \"type\": \"string\",\r\n                \"pattern\": \"^[a-z0-9]*$\",\r\n                \"maxLength\":20 \r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query a sentiment failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data[0]).to.have.property('message').to.eql(\"must match pattern \\\"^[a-z0-9]*$\\\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n          \"statement\": \"Cats are stupid.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/sentiment",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"sentiment"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contain(\"POST-Trucker-sentiment2.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourcename\": \"sentiment2\",\r\n    \"type\": \"Util-Sentiment\",\r\n    \"restmethod\": \"POST\",\r\n          \"options\": {\r\n            \"extras\": {\r\n              \"cats\": 5,\r\n              \"amazing\": 2,\r\n              \"tasteless\": -10,\r\n              \"Wanted\": 10\r\n            }\r\n        },\r\n    \"validations\": {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n            \"statement\": {\r\n                \"type\": \"string\",\r\n                \"pattern\": \"^[ A-za-z0-9.]*$\",\r\n                \"maxLength\":20 \r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query a sentiment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.have.property('score').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n          \"statement\": \"Cats are stupid.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/sentiment2",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"sentiment2"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a resource Correct get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"create a resource Correct get\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contain(\"GET-Trucker-sentiment1.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourcename\": \"sentiment1\",\r\n    \"type\": \"Util-Sentiment\",\r\n    \"restmethod\": \"GET\",\r\n    \"options\":{\r\n            \"extras\": {\r\n              \"cats\": 5,\r\n              \"amazing\": 2,\r\n              \"tasteless\": -10,\r\n              \"Wanted\": 10\r\n          }\r\n        },\r\n    \"validations\": {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n            \"statement\": {\r\n                \"type\": \"string\",\r\n                \"pattern\": \"^[ A-za-z0-9.]*$\",\r\n                \"maxLength\":20 \r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources/",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Query a sentiment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.have.property('score').to.eql(8);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/sentiment1?statement=Cats%20are%20good.",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"sentiment1"
							],
							"query": [
								{
									"key": "statement",
									"value": "Cats%20are%20good."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "login on tenant user as a read only user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status').to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('token');\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody)\r",
									"pm.environment.set(\"Token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerRead\",\r\n\t\"password\": \"Secret@123\",\r\n\t\"tenant\": \"Trucker\",\r\n\t\"type\": \"local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query a sentiment as read only user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment as read only user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.have.property('score').to.eql(8);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/sentiment1?statement=Cats%20are%20good.",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"sentiment1"
							],
							"query": [
								{
									"key": "statement",
									"value": "Cats%20are%20good."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Query a sentiment as read only user withoud a statment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment as read only user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.have.property('msg').to.eql(\"statement is not found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/sentiment1",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"sentiment1"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a resource attempt by read  only user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(false);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"create a resource attempt by read  only user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorMsg).to.have.property('message').to.eql(\"Read Access Only permitted\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourcename\": \"sentimentread\",\r\n    \"type\": \"Util-Sentiment\",\r\n    \"restmethod\": \"POST\",\r\n    \"script\":{\r\n          \"options\": {\r\n            \"extras\": {\r\n              \"cats\": 5,\r\n              \"amazing\": 2,\r\n              \"tasteless\": -10,\r\n              \"Wanted\": 10\r\n            }\r\n          }\r\n        },\r\n    \"validations\": {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n            \"statement\": {\r\n                \"type\": \"string\",\r\n                \"pattern\": \"^[ A-za-z0-9.]*$\",\r\n                \"maxLength\":20 \r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "get the sentiment resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"query a type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourcename\": \"sentimentread\",\r\n    \"type\": \"Util-Sentiment\",\r\n    \"restmethod\": \"POST\",\r\n    \"script\":{\r\n          \"options\": {\r\n            \"extras\": {\r\n              \"cats\": 5,\r\n              \"amazing\": 2,\r\n              \"tasteless\": -10,\r\n              \"Wanted\": 10\r\n            }\r\n          }\r\n        },\r\n    \"validations\": {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n            \"statement\": {\r\n                \"type\": \"string\",\r\n                \"pattern\": \"^[ A-za-z0-9.]*$\",\r\n                \"maxLength\":20 \r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources?type=Util-Sentiment",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							],
							"query": [
								{
									"key": "type",
									"value": "Util-Sentiment"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "util-fuzzy",
			"item": [
				{
					"name": "login on tenant user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status').to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('token');\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody)\r",
									"pm.environment.set(\"Token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerWrite\",\r\n\t\"password\": \"Secret@123\",\r\n\t\"tenant\": \"Trucker\",\r\n\t\"type\": \"local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contain(\"POST-Trucker-fuze1.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"fuze1\",\r\n        \"type\": \"Util-Fuzzy\",\r\n        \"restmethod\": \"POST\",\r\n          \"options\": {\r\n            \"keys\": [\"author.tags.value\"]\r\n          }\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query a fuzzy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data[0].item).to.have.property('title').to.eql(\"The Lock Artist\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n          \"searchbase\": [{\r\n            \"title\": \"Old Man's War\",\r\n            \"author\": {\r\n              \"name\": \"John Scalzi\",\r\n              \"tags\": [{\r\n                \"value\": \"American\"\r\n              }]\r\n            }\r\n          }, {\r\n            \"title\": \"The Lock Artist\",\r\n            \"author\": {\r\n              \"name\": \"Steve Hamilton\",\r\n              \"tags\": [{\r\n                \"value\": \"English\"\r\n              }]\r\n            }\r\n          }],\r\n          \"key\": \"englsh\"\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/fuze1",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"fuze1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query a fuzzy without a search base",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data).to.eql(\"searchbase is not found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n          \"key\": \"englsh\"\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/fuze1",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"fuze1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query a fuzzy no key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data).to.eql(\"key is not found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n          \"searchbase\": [{\r\n            \"title\": \"Old Man's War\",\r\n            \"author\": {\r\n              \"name\": \"John Scalzi\",\r\n              \"tags\": [{\r\n                \"value\": \"American\"\r\n              }]\r\n            }\r\n          }, {\r\n            \"title\": \"The Lock Artist\",\r\n            \"author\": {\r\n              \"name\": \"Steve Hamilton\",\r\n              \"tags\": [{\r\n                \"value\": \"English\"\r\n              }]\r\n            }\r\n          }]\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/fuze1",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"fuze1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "util-echo",
			"item": [
				{
					"name": "login on tenant user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status').to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('token');\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody)\r",
									"pm.environment.set(\"Token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerWrite\",\r\n\t\"password\": \"Secret@123\",\r\n\t\"tenant\": \"Trucker\",\r\n\t\"type\": \"local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contain(\"GET-Trucker-echo1.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"echo1\",\r\n        \"type\": \"Util-Echo\",\r\n        \"restmethod\": \"GET\",\r\n        \"validations\":{\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n            \"voila\": {\r\n                \"type\": \"string\",\r\n                \"enum\": [\"true\",\"false\"]\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query a echo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data).to.have.property('voila').to.eql(\"true\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"voila\":true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/echo1?voila=true",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"echo1"
							],
							"query": [
								{
									"key": "voila",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Script-JS",
			"item": [
				{
					"name": "login on tenant user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status').to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('token');\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody)\r",
									"pm.environment.set(\"Token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerWrite\",\r\n\t\"password\": \"Secret@123\",\r\n\t\"tenant\": \"Trucker\",\r\n\t\"type\": \"local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contain(\"PUT-Trucker-jsscript1.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourcename\": \"jsscript1\",\r\n    \"type\": \"Script-JS\",\r\n    \"restmethod\": \"PUT\",\r\n    \"script\": \"testscript.js\",\r\n        \"validations\":{\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n                \"number\": {\r\n                    \"type\": \"number\"\r\n                }\r\n            }\r\n        }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query a script validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data[0]).to.have.property('message').to.eql(\"must be number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"number\":\"ABC\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/jsscript1",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"jsscript1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query a script validation sucess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a script\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(10648);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"number\":22\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/jsscript1",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"jsscript1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query a script validation sucess cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a script\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(10648);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"number\":22\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/jsscript1",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"jsscript1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Script-SSH",
			"item": [
				{
					"name": "login on tenant user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status').to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('token');\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody)\r",
									"pm.environment.set(\"Token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerWrite\",\r\n\t\"password\": \"Secret@123\",\r\n\t\"tenant\": \"Trucker\",\r\n\t\"type\": \"local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a password ssh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contain(\"Credentials Created: sshlocalconnect\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"credentialname\": \"sshlocalconnect\",\r\n        \"type\": \"Script-SSH\",\r\n        \"hostname\": \"{{SCRIPT_SSH_HOST_PASSWORD}}\",\r\n        \"username\": \"root\",\r\n        \"password\": \"root\",\r\n        \"port\": {{SCRIPT_SSH_PORT_PASSWORD}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/credentials",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a password ssh Duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(false);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorMsg).to.have.property('constraint').to.eql(\"credentials_tenant_credentialname_unique\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"credentialname\": \"sshlocalconnect\",\r\n        \"type\": \"Script-SSH\",\r\n        \"hostname\": \"{{SCRIPT_SSH_HOST_PASSWORD}}\",\r\n        \"username\": \"root\",\r\n        \"password\": \"root\",\r\n        \"port\": {{SCRIPT_SSH_PORT_PASSWORD}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/credentials",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a credentials privatekey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(\"Credentials Created: sshlocalconnectprivate\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"credentialname\": \"sshlocalconnectprivate\",\r\n        \"type\": \"Script-SSH\",\r\n        \"hostname\": \"{{SCRIPT_SSH_HOST_PRIVATEKEY}}\",\r\n        \"username\": \"app-admin\",\r\n        \"password\": \"sshprivate1.key\",\r\n        \"port\": {{SCRIPT_SSH_PORT_PRIVATEKEY}},\r\n        \"passwordisPrivateKey\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/credentials",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a resource ssh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"GET-Trucker-sshell1.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"sshell1\",\r\n        \"type\": \"Script-SSH\",\r\n        \"credentialname\": \"sshlocalconnect\",\r\n        \"restmethod\": \"GET\",\r\n        \"script\": \"echo $PATH\",\r\n        \"validations\": {\r\n          \"type\": [\"object\", \"null\"],\r\n          \"properties\": {\r\n            \"args\": {\r\n                \"type\": \"string\",\r\n                \"pattern\": \"^[-a-z0-9]*$\",\r\n                \"maxLength\": 8\r\n            }\r\n          }\r\n        }\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query a script validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data).to.have.property('stdout').to.contains(\"/usr/bin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/sshell1",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"sshell1"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a resource ssh privatekey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"GET-Trucker-sshell2.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"sshell2\",\r\n        \"type\": \"Script-SSH\",\r\n        \"credentialname\": \"sshlocalconnectprivate\",\r\n        \"restmethod\": \"GET\",\r\n        \"script\": \"df\",\r\n        \"validations\": {\r\n          \"type\": [\"object\", \"null\"],\r\n          \"properties\": {\r\n            \"args\": {\r\n                \"type\": \"string\",\r\n                \"pattern\": \"^[-A-Za-z0-9|,]*$\",\r\n                \"maxLength\": 25\r\n            }\r\n          }\r\n        }\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query a script sshkey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data).to.have.property('stdout').to.contains(\"Used Available\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/sshell2?args=-T,-a",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"sshell2"
							],
							"query": [
								{
									"key": "args",
									"value": "-T,-a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create a resource without valid cred",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"GET-Trucker-sshell3.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"sshell3\",\r\n        \"type\": \"Script-SSH\",\r\n        \"credentialname\": \"asd\",\r\n        \"restmethod\": \"GET\",\r\n        \"script\": \"df\",\r\n        \"validations\": {\r\n          \"type\": [\"object\", \"null\"],\r\n          \"properties\": {\r\n            \"args\": {\r\n                \"type\": \"string\",\r\n                \"pattern\": \"^[-A-Za-z0-9|,]*$\",\r\n                \"maxLength\": 25\r\n            }\r\n          }\r\n        }\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query a script sshkey Cred invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(false);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('errorMsg').to.eql(\"Credential issue\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/sshell3?args=-T,-a",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"sshell3"
							],
							"query": [
								{
									"key": "args",
									"value": "-T,-a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete duplicate credential",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(\"Credentials Deleted: sshlocalconnect\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/credentials/sshlocalconnect",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"credentials",
								"sshlocalconnect"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Script-Shell",
			"item": [
				{
					"name": "login on tenant user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status').to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('token');\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody)\r",
									"pm.environment.set(\"Token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerWrite\",\r\n\t\"password\": \"Secret@123\",\r\n\t\"tenant\": \"Trucker\",\r\n\t\"type\": \"local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a resource SHELL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"GET-Trucker-scriptshell1.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"scriptshell1\",\r\n        \"type\": \"Script-Shell\",\r\n        \"credentialname\": \"sshlocalconnect\",\r\n        \"restmethod\": \"GET\",\r\n        \"script\": \"whoami\",\r\n        \"validations\": {\r\n          \"type\": [\"object\", \"null\"],\r\n          \"properties\": {\r\n            \"args\": {\r\n                \"type\": \"string\",\r\n                \"pattern\": \"^[-a-z0-9]*$\",\r\n                \"maxLength\": 8\r\n            }\r\n          }\r\n        }\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query a script shell validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data).to.have.property('STDOUT').to.contains(\"Usage: whoami\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/scriptshell1?args=--help",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"scriptshell1"
							],
							"query": [
								{
									"key": "args",
									"value": "--help"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Query a script shell validation failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data).to.have.property('STDERR').to.contains(\"whoami\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/scriptshell1?args=abc",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"scriptshell1"
							],
							"query": [
								{
									"key": "args",
									"value": "abc"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "iot-redis",
			"item": [
				{
					"name": "login on tenant user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status').to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('token');\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody)\r",
									"pm.environment.set(\"Token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerWrite\",\r\n\t\"password\": \"Secret@123\",\r\n\t\"tenant\": \"Trucker\",\r\n\t\"type\": \"local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a redis credential",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"Credentials Created: redis1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"credentialname\": \"redis1\",\r\n        \"type\": \"IOT-Redis\",\r\n        \"hostname\": \"{{IOT_REDIS_HOST}}\",\r\n        \"port\": {{IOT_REDIS_PORT}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/credentials",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a redis Set call",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Trucker-redis1.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"redis1\",\r\n        \"type\": \"IOT-Redis\",\r\n        \"credentialname\": \"redis1\",\r\n        \"restmethod\": \"POST\",\r\n        \"source_type\": \"SET\",\r\n        \"validations\": {\r\n          \"type\": \"object\",\r\n          \"properties\": {\r\n            \"key\": {\r\n              \"type\": \"string\",\r\n              \"pattern\": \"^[a-zA-Z0-9_]*$\",\r\n              \"maxLength\": 8\r\n            },\r\n            \"value\": {\r\n              \"type\": \"string\",\r\n              \"pattern\": \"^[a-zA-Z0-9_]*$\",\r\n              \"maxLength\": 8\r\n            },\r\n            \"ttyl\": {\r\n              \"type\": \"number\"\r\n            }\r\n          }\r\n        }\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a redis GET call",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"GET-Trucker-redis2.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"redis2\",\r\n        \"type\": \"IOT-Redis\",\r\n        \"credentialname\": \"redis1\",\r\n        \"restmethod\": \"GET\",\r\n        \"source_type\": \"GET\",\r\n        \"validations\": {\r\n          \"type\": \"object\",\r\n          \"properties\": {\r\n            \"key\": {\r\n              \"type\": \"string\",\r\n              \"pattern\": \"^[a-zA-Z0-9_]*$\",\r\n              \"maxLength\": 8\r\n            }\r\n          }\r\n        }\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query a Redis Set credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"key\": \"12d3q\",\r\n        \"value\": \"abcfh\",\r\n        \"ttyl\": 2\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/redis1",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"redis1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query a iot redis get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(\"abcfh\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/redis2?key=12d3q",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"redis2"
							],
							"query": [
								{
									"key": "key",
									"value": "12d3q"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Query a iot redis ttyl end",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 2000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "setTimeout(function(){}, 2000);",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/redis2?key=12d3q",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"redis2"
							],
							"query": [
								{
									"key": "key",
									"value": "12d3q"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "iot-kafka",
			"item": [
				{
					"name": "login on tenant user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status').to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('token');\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody)\r",
									"pm.environment.set(\"Token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerWrite\",\r\n\t\"password\": \"Secret@123\",\r\n\t\"tenant\": \"Trucker\",\r\n\t\"type\": \"local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a kafka credential",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"Credentials Created: kafkaconnect1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"credentialname\": \"kafkaconnect1\",\r\n        \"type\": \"IOT-Kafka-Producer\",\r\n        \"hostname\": \"{{IOT_KAFKA_HOST}}:{{IOT_KAFKA_PORT}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/credentials",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a kafka call",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"PATCH-Trucker-kafka1.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"kafka1\",\r\n        \"type\": \"IOT-Kafka-Producer\",\r\n        \"restmethod\": \"PATCH\",\r\n        \"target_type\": {\r\n          \"topic\": \"admintome-test\"\r\n        },\r\n        \"credentialname\": \"kafkaconnect1\",\r\n        \"validations\": {\r\n          \"type\": \"object\",\r\n          \"properties\": {\r\n            \"message\": {\r\n              \"type\": \"string\",\r\n              \"pattern\": \"^[a-z0-9A-Z_]*$\",\r\n              \"maxLength\": 8\r\n            }\r\n          }\r\n        }\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "send a kafka message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).to.have.property('topicName').to.eql(\"admintome-test\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"key\": \"asdfghj\",\r\n        \"value\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/kafka1",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"kafka1"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Flush ",
			"item": [
				{
					"name": "Flush Cache",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{Token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/v1/cache/",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"cache",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DBPostgres",
			"item": [
				{
					"name": "login on tenant user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status').to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('token');\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody)\r",
									"pm.environment.set(\"Token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerWrite\",\r\n\t\"password\": \"Secret@123\",\r\n\t\"tenant\": \"Trucker\",\r\n\t\"type\": \"local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a postgres credential",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"Credentials Created: postgresdata1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"credentialname\": \"postgresdata1\",\r\n        \"type\": \"DB-Postgres\",\r\n        \"hostname\": \"{{PG_HOST}}\",\r\n        \"username\": \"testuser\",\r\n        \"password\": \"password\",\r\n        \"database\": \"userdb\",\r\n        \"port\": {{PG_PORT}},\r\n        \"minpool\": 100,\r\n        \"maxpool\": 200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/credentials",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a postgres credential incorrect creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"Credentials Created: postgresdata2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"credentialname\": \"postgresdata2\",\r\n        \"type\": \"DB-Postgres\",\r\n        \"hostname\": \"{{PG_HOST}}\",\r\n        \"username\": \"testuser\",\r\n        \"password\": \"passworda\",\r\n        \"database\": \"userdb\",\r\n        \"port\": {{PG_PORT}},\r\n        \"minpool\": 100,\r\n        \"maxpool\": 200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/credentials",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a postgres resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Trucker-postgres1.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"postgres1\",\r\n        \"type\": \"DB-Postgres\",\r\n        \"credentialname\": \"postgresdata1\",\r\n        \"restmethod\": \"POST\",\r\n        \"script\": \" select CURRENT_DATE, '[[dbname]]' as db; \",\r\n        \"job_timeout\": 4354,\r\n        \"validations\": {\r\n          \"type\": \"object\",\r\n          \"properties\": {\r\n            \"dbname\": {\r\n              \"type\": \"string\",\r\n              \"pattern\": \"^[a-z0-9]*$\",\r\n              \"maxLength\": 8\r\n            }\r\n          }\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a postgres resource incorrect creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Trucker-postgres2.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"postgres2\",\r\n        \"type\": \"DB-Postgres\",\r\n        \"credentialname\": \"postgresdata2\",\r\n        \"restmethod\": \"POST\",\r\n        \"script\": \" select CURRENT_DATE, '[[dbname]]' as db; \",\r\n        \"job_timeout\": 4354,\r\n        \"validations\": {\r\n          \"type\": \"object\",\r\n          \"properties\": {\r\n            \"dbname\": {\r\n              \"type\": \"string\",\r\n              \"pattern\": \"^[a-z0-9]*$\",\r\n              \"maxLength\": 8\r\n            }\r\n          }\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a postgres resource invalid sql",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Trucker-postgres3.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"postgres3\",\r\n        \"type\": \"DB-Postgres\",\r\n        \"credentialname\": \"postgresdata1\",\r\n        \"restmethod\": \"POST\",\r\n        \"script\": \" select CURRENT_DATE, [[dbname]] as db; \",\r\n        \"job_timeout\": 4354,\r\n        \"validations\": {\r\n          \"type\": \"object\",\r\n          \"properties\": {\r\n            \"dbname\": {\r\n              \"type\": \"string\",\r\n              \"pattern\": \"^[a-z0-9]*$\",\r\n              \"maxLength\": 8\r\n            }\r\n          }\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "send a postgres query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.rows[0]).to.have.property('db').to.eql(\"userdb\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n          \"dbname\": \"userdb\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/postgres1",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"postgres1"
							]
						}
					},
					"response": []
				},
				{
					"name": "send a postgres query Incorrect creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(false);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorMsg).to.have.property('severity').to.eql(\"FATAL\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n          \"dbname\": \"userdb\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/postgres2",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"postgres2"
							]
						}
					},
					"response": []
				},
				{
					"name": "send a postgres query Incorrect query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(false);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorMsg).to.have.property('severity').to.eql(\"ERROR\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n          \"dbname\": \"userdb\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/postgres3",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"postgres3"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "DBMysql",
			"item": [
				{
					"name": "login on tenant2 user using a read user from tenant1  ( cross mapping check )",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status').to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('token');\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody)\r",
									"pm.environment.set(\"Token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerRead\",\r\n\t\"password\": \"Secret@123\",\r\n\t\"tenant\": \"Trucker2\",\r\n\t\"type\": \"local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a mysql credential",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"Credentials Created: mysqldata1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"credentialname\": \"mysqldata1\",\r\n        \"type\": \"DB-Mysql\",\r\n        \"hostname\": \"{{MY_HOST}}\",\r\n        \"username\": \"sa\",\r\n        \"password\": \"password\",\r\n        \"database\": \"primary\",\r\n        \"port\": {{MY_PORT}},\r\n        \"minpool\": 100,\r\n        \"maxpool\": 200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/credentials",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a mysql credential incorrect creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"Credentials Created: mysqldata2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"credentialname\": \"mysqldata2\",\r\n        \"type\": \"DB-Mysql\",\r\n        \"hostname\": \"{{MY_HOST}}\",\r\n        \"username\": \"sa\",\r\n        \"password\": \"password1\",\r\n        \"database\": \"primary\",\r\n        \"port\": {{MY_PORT}},\r\n        \"minpool\": 100,\r\n        \"maxpool\": 200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/credentials",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a mysql resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Trucker2-mysql1.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"mysql1\",\r\n        \"type\": \"DB-Mysql\",\r\n        \"credentialname\": \"mysqldata1\",\r\n        \"restmethod\": \"POST\",\r\n        \"script\": \" select CURDATE() as 'current_date' ,id, user,'[[dbname]]' as dbname from information_schema.processlist; \",\r\n        \"job_timeout\": 4354,\r\n        \"validations\": {\r\n          \"type\": \"object\",\r\n          \"properties\": {\r\n            \"dbname\": {\r\n              \"type\": \"string\",\r\n              \"pattern\": \"^[a-z0-9]*$\",\r\n              \"maxLength\": 8\r\n            }\r\n          }\r\n        }\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a mysql resource incorrect creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Trucker2-mysql2.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"mysql2\",\r\n        \"type\": \"DB-Mysql\",\r\n        \"credentialname\": \"mysqldata2\",\r\n        \"restmethod\": \"POST\",\r\n        \"script\": \" select CURDATE() as 'current_date' ,id, user,'[[ dbname ]]' from information_schema.processlist; \",\r\n        \"job_timeout\": 4354,\r\n        \"validations\": {\r\n          \"type\": \"object\",\r\n          \"properties\": {\r\n            \"dbname\": {\r\n              \"type\": \"string\",\r\n              \"pattern\": \"^[a-z0-9]*$\",\r\n              \"maxLength\": 8\r\n            }\r\n          }\r\n        }\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a mysql resource invalid sql",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Trucker2-mysql3.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"mysql3\",\r\n        \"type\": \"DB-Mysql\",\r\n        \"credentialname\": \"mysqldata1\",\r\n        \"restmethod\": \"POST\",\r\n        \"script\": \" select CURDATE_ABC() as 'current_date' ,id, user,'[[ dbname ]]' from information_schema.processlist; \",\r\n        \"job_timeout\": 4354,\r\n        \"validations\": {\r\n          \"type\": \"object\",\r\n          \"properties\": {\r\n            \"dbname\": {\r\n              \"type\": \"string\",\r\n              \"pattern\": \"^[a-z0-9]*$\",\r\n              \"maxLength\": 8\r\n            }\r\n          }\r\n        }\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "send a mysql query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0][0]).to.have.property('dbname').to.eql(\"userdb\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n          \"dbname\": \"userdb\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/mysql1",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"mysql1"
							]
						}
					},
					"response": []
				},
				{
					"name": "send a mysql query Incorrect creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(false);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorMsg).to.have.property('code').to.eql(\"ER_ACCESS_DENIED_ERROR\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n          \"dbname\": \"userdb\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/mysql2",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"mysql2"
							]
						}
					},
					"response": []
				},
				{
					"name": "send a mysql query Incorrect query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(false);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorMsg).to.have.property('code').to.eql(\"ER_SP_DOES_NOT_EXIST\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n          \"dbname\": \"userdb\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/mysql3",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"mysql3"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "DBMaria",
			"item": [
				{
					"name": "login on tenant2 user using a read user from tenant1  ( cross mapping check )",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status').to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('token');\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody)\r",
									"pm.environment.set(\"Token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerRead\",\r\n\t\"password\": \"Secret@123\",\r\n\t\"tenant\": \"Trucker2\",\r\n\t\"type\": \"local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a maria credential",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"Credentials Created: mariadata1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"credentialname\": \"mariadata1\",\r\n        \"type\": \"DB-Mariadb\",\r\n        \"hostname\": \"{{MARIA_HOST}}\",\r\n        \"username\": \"root\",\r\n        \"password\": \"password\",\r\n        \"database\": \"primary\",\r\n        \"port\": {{MARIA_PORT}},\r\n        \"minpool\": 100,\r\n        \"maxpool\": 200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/credentials",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a maria credential incorrect creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"Credentials Created: mariadata2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"credentialname\": \"mariadata2\",\r\n        \"type\": \"DB-Mariadb\",\r\n        \"hostname\": \"{{MARIA_HOST}}\",\r\n        \"username\": \"root\",\r\n        \"password\": \"password1\",\r\n        \"database\": \"primary\",\r\n        \"port\": {{MARIA_PORT}},\r\n        \"minpool\": 100,\r\n        \"maxpool\": 200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/credentials",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a maria resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Trucker2-maria1.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"maria1\",\r\n        \"type\": \"DB-Mariadb\",\r\n        \"credentialname\": \"mariadata1\",\r\n        \"restmethod\": \"POST\",\r\n        \"script\": \" select CURDATE() as 'current_date' ,id, user,'[[dbname]]' from information_schema.processlist; \",\r\n        \"job_timeout\": 4354,\r\n        \"validations\": {\r\n          \"type\": \"object\",\r\n          \"properties\": {\r\n            \"dbname\": {\r\n              \"type\": \"string\",\r\n              \"pattern\": \"^[a-z0-9]*$\",\r\n              \"maxLength\": 8\r\n            }\r\n          }\r\n        }\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a mysql resource incorrect creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Trucker2-maria2.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"maria2\",\r\n        \"type\": \"DB-Mariadb\",\r\n        \"credentialname\": \"mariadata2\",\r\n        \"restmethod\": \"POST\",\r\n        \"script\": \" select CURDATE() as 'current_date' ,id, user,'[[ dbname ]]' from information_schema.processlist; \",\r\n        \"job_timeout\": 4354,\r\n        \"validations\": {\r\n          \"type\": \"object\",\r\n          \"properties\": {\r\n            \"dbname\": {\r\n              \"type\": \"string\",\r\n              \"pattern\": \"^[a-z0-9]*$\",\r\n              \"maxLength\": 8\r\n            }\r\n          }\r\n        }\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a maria resource invalid sql",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Trucker2-maria3.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"maria3\",\r\n        \"type\": \"DB-Mariadb\",\r\n        \"credentialname\": \"mariadata1\",\r\n        \"restmethod\": \"POST\",\r\n        \"script\": \" select CURDATE_ABC() as 'current_date' ,id, user,'[[ dbname ]]' from information_schema.processlist; \",\r\n        \"job_timeout\": 4354,\r\n        \"validations\": {\r\n          \"type\": \"object\",\r\n          \"properties\": {\r\n            \"dbname\": {\r\n              \"type\": \"string\",\r\n              \"pattern\": \"^[a-z0-9]*$\",\r\n              \"maxLength\": 8\r\n            }\r\n          }\r\n        }\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "send a maria query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0][0]).to.have.property('userdb').to.eql(\"userdb\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n          \"dbname\": \"userdb\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/maria1",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"maria1"
							]
						}
					},
					"response": []
				},
				{
					"name": "send a maria query Incorrect creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(false);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorMsg).to.have.property('code').to.eql(\"ER_ACCESS_DENIED_ERROR\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n          \"dbname\": \"userdb\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/maria2",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"maria2"
							]
						}
					},
					"response": []
				},
				{
					"name": "send a maria query Incorrect query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(false);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorMsg).to.have.property('code').to.eql(\"ER_SP_DOES_NOT_EXIST\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n          \"dbname\": \"userdb\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/maria3",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"maria3"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "DBMssql",
			"item": [
				{
					"name": "login on tenant2 user using a read user from tenant1  ( cross mapping check )",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status').to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('token');\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody)\r",
									"pm.environment.set(\"Token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerRead\",\r\n\t\"password\": \"Secret@123\",\r\n\t\"tenant\": \"Trucker2\",\r\n\t\"type\": \"local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a Mssql credential",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"Credentials Created: mssql1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"credentialname\": \"mssql1\",\r\n        \"type\": \"DB-Mssql\",\r\n        \"hostname\": \"{{MSSQL_HOST}}\",\r\n        \"username\": \"sa\",\r\n        \"password\": \"SpikePrototype2016!\",\r\n        \"database\": \"master\",\r\n        \"port\": {{MSSQL_PORT}},\r\n        \"minpool\": 100,\r\n        \"maxpool\": 200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/credentials",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a mssql credential incorrect creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"Credentials Created: mssql2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"credentialname\": \"mssql2\",\r\n        \"type\": \"DB-Mssql\",\r\n        \"hostname\": \"{{MSSQL_HOST}}\",\r\n        \"username\": \"sa\",\r\n        \"password\": \"SpikePrototype20161!\",\r\n        \"database\": \"master\",\r\n        \"port\": {{MSSQL_PORT}},\r\n        \"minpool\": 100,\r\n        \"maxpool\": 200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/credentials",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a mssql resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Trucker2-mssql1.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"mssql1\",\r\n        \"type\": \"DB-Mssql\",\r\n        \"credentialname\": \"mssql1\",\r\n        \"restmethod\": \"POST\",\r\n        \"script\": \"SELECT GETDATE() as 'current_date' ,'[[dbname]]' AS replacevalue,  DB_NAME(dbid) as DBName, COUNT(dbid) as NumberOfConnections,loginame as LoginName FROM  sys.sysprocesses WHERE  dbid > 0 GROUP BY  dbid, loginame;\",\r\n        \"job_timeout\": 4354,\r\n        \"validations\": {\r\n          \"type\": \"object\",\r\n          \"properties\": {\r\n            \"dbname\": {\r\n              \"type\": \"string\",\r\n              \"pattern\": \"^[a-z0-9]*$\",\r\n              \"maxLength\": 8\r\n            }\r\n          }\r\n        }\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a mssql resource incorrect creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Trucker2-mssql2.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"mssql2\",\r\n        \"type\": \"DB-Mssql\",\r\n        \"credentialname\": \"mssql2\",\r\n        \"restmethod\": \"POST\",\r\n        \"script\": \"SELECT GETDATE() as 'current_date' ,'[[ dbname ]]' AS replacevalue,  DB_NAME(dbid) as DBName, COUNT(dbid) as NumberOfConnections,loginame as LoginName FROM  sys.sysprocesses WHERE  dbid > 0 GROUP BY  dbid, loginame;\",\r\n        \"job_timeout\": 4354,\r\n        \"validations\": {\r\n          \"type\": \"object\",\r\n          \"properties\": {\r\n            \"dbname\": {\r\n              \"type\": \"string\",\r\n              \"pattern\": \"^[a-z0-9]*$\",\r\n              \"maxLength\": 8\r\n            }\r\n          }\r\n        }\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a mssql resource invalid sql",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Trucker2-mssql3.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"mssql3\",\r\n        \"type\": \"DB-Mssql\",\r\n        \"credentialname\": \"mssql1\",\r\n        \"restmethod\": \"POST\",\r\n        \"script\": \"SELECT GETDATE_ABC() as 'current_date' ,'[[dbname]]' AS replacevalue,  DB_NAME(dbid) as DBName, COUNT(dbid) as NumberOfConnections,loginame as LoginName FROM  sys.sysprocesses WHERE  dbid > 0 GROUP BY  dbid, loginame;\",\r\n        \"job_timeout\": 4354,\r\n        \"validations\": {\r\n          \"type\": \"object\",\r\n          \"properties\": {\r\n            \"dbname\": {\r\n              \"type\": \"string\",\r\n              \"pattern\": \"^[a-z0-9]*$\",\r\n              \"maxLength\": 8\r\n            }\r\n          }\r\n        }\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "send a mssql query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).to.have.property('replacevalue').to.eql(\"userdb\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n          \"dbname\": \"userdb\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/mssql1",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"mssql1"
							]
						}
					},
					"response": []
				},
				{
					"name": "send a  mssql query Incorrect creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(false);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorMsg).to.have.property('code').to.eql(\"ELOGIN\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n          \"dbname\": \"userdb\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/mssql2",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"mssql2"
							]
						}
					},
					"response": []
				},
				{
					"name": "send a mssql query Incorrect query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(false);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorMsg).to.have.property('code').to.eql(\"EREQUEST\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n          \"dbname\": \"userdb\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/mssql3",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"mssql3"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "DB-SQLLite",
			"item": [
				{
					"name": "login on tenant2 user using a read user from tenant1  ( cross mapping check )",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status').to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('token');\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody)\r",
									"pm.environment.set(\"Token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"userTruckerRead\",\r\n\t\"password\": \"Secret@123\",\r\n\t\"tenant\": \"Trucker2\",\r\n\t\"type\": \"local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a SQLLite credential",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a credential\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"Credentials Created: sqllitedata4\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentialname\": \"sqllitedata4\",\r\n     \"type\": \"DB-Sqllite\",\r\n     \"filename\": \"/tmp/test1.db\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/credentials",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a sqllite  resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Trucker2-sqllite.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"resourcename\": \"sqllite\",\r\n            \"type\": \"DB-Sqllite\",\r\n            \"credentialname\": \"sqllitedata4\",\r\n            \"restmethod\": \"POST\",\r\n            \"script\": \"select date(),'[[dbname]]' as DBNAME;\",\r\n            \"job_timeout\": 4354,\r\n            \"validations\": {\r\n                 \"type\": \"object\",\r\n                 \"properties\": {\r\n                 \"dbname\": {\r\n                      \"type\": \"string\",\r\n                      \"pattern\": \"^[a-z0-9]*$\",\r\n                      \"maxLength\": 8\r\n                  }\r\n             }\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "send a sqllite query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Query a sentiment failed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).to.have.property('DBNAME').to.eql(\"userdb\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n          \"dbname\": \"userdb\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/sqllite",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"sqllite"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "File SFTP",
			"item": [
				{
					"name": "creds",
					"item": [
						{
							"name": "login on tenant2 user using a read user from tenant1  ( cross mapping check )",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login Check\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status').to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('token');\r",
											"});\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"pm.environment.set(\"Token\", jsonData.token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"username\": \"userTruckerRead\",\r\n\t\"password\": \"Secret@123\",\r\n\t\"tenant\": \"Trucker2\",\r\n\t\"type\": \"local\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/api/v1/login",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a FILE credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Failed to create a credential\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data').to.contains(\"Credentials Created: sftpconnect1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"credentialname\": \"sftpconnect1\",\r\n        \"type\": \"File-SFTP\",\r\n        \"hostname\": \"{{SFTP_HOST}}\",\r\n        \"username\": \"foo\",\r\n        \"password\": \"pass\",\r\n        \"port\": {{SFTP_PORT}}\r\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/api/v1/credentials",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a FILE privayekey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Failed to create a credential\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data').to.contains(\"Credentials Created: sftpconnect2\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"credentialname\": \"sftpconnect2\",\r\n    \"type\": \"File-SFTP\",\r\n    \"hostname\": \"{{SFTPP_HOST}}\",\r\n    \"username\": \"foo\",\r\n    \"port\": {{SFTPP_PORT}},\r\n    \"password\": \"sshprivate.key\",\r\n    \"passwordisPrivateKey\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/api/v1/credentials",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a FILE credential Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Failed to create a credential\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data').to.contains(\"Credentials Created: sftpconnect3\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"credentialname\": \"sftpconnect3\",\r\n        \"type\": \"File-SFTP\",\r\n        \"hostname\": \"{{SFTP_HOST}}\",\r\n        \"username\": \"foo\",\r\n        \"password\": \"pass1\",\r\n        \"port\": {{SFTP_PORT}}\r\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/api/v1/credentials",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"credentials"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "file",
					"item": [
						{
							"name": "create a File  resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Failed to create a resource\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Trucker2-fileupload.json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"resourcename\": \"fileupload\",\r\n        \"type\": \"File-SFTP\",\r\n        \"restmethod\": \"POST\",\r\n        \"credentialname\": \"sftpconnect1\",\r\n        \"source\": \"upload\",\r\n        \"source_path\": \"/etc/resolv.conf\",\r\n        \"source_type\": \"file\",\r\n        \"target_path\": \"/upload/resolv.conf\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/api/v1/resources",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a File private resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Failed to create a resource\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data').to.contains(\"GET-Trucker2-fileupload2.json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"resourcename\": \"fileupload2\",\r\n        \"type\": \"File-SFTP\",\r\n        \"restmethod\": \"GET\",\r\n        \"credentialname\": \"sftpconnect2\",\r\n        \"source\": \"upload\",\r\n        \"source_path\": \"/etc/resolv.conf\",\r\n        \"source_type\": \"file\",\r\n        \"target_path\": \"/home/foo/upload/resolv.conf\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/api/v1/resources",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a File  resource download",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Failed to create a resource\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Trucker2-fileupload3.json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"resourcename\": \"fileupload3\",\r\n        \"type\": \"File-SFTP\",\r\n        \"restmethod\": \"POST\",\r\n        \"credentialname\": \"sftpconnect1\",\r\n        \"source\": \"download\",\r\n        \"target_path\": \"/tmp/resolv.conf\",\r\n        \"source_type\": \"file\",\r\n        \"source_path\": \"/upload/resolv.conf\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/api/v1/resources",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a File private resource download",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Failed to create a resource\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data').to.contains(\"GET-Trucker2-fileupload4.json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"resourcename\": \"fileupload4\",\r\n        \"type\": \"File-SFTP\",\r\n        \"restmethod\": \"GET\",\r\n        \"credentialname\": \"sftpconnect2\",\r\n        \"source\": \"download\",\r\n        \"target_path\": \"/tmp/resolv.conf\",\r\n        \"source_type\": \"file\",\r\n        \"source_path\": \"/home/foo/upload/resolv.conf\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/api/v1/resources",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "send a fileupload - password query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Query a sentiment failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.contain(\"resolv.conf\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/v1/jobs/fileupload",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"jobs",
										"fileupload"
									]
								}
							},
							"response": []
						},
						{
							"name": "send a fileupload - private query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Query a sentiment failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.contain(\"resolv.conf\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/v1/jobs/fileupload2",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"jobs",
										"fileupload2"
									]
								}
							},
							"response": []
						},
						{
							"name": "send a filedownload - password query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Query a sentiment failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.contain(\"resolv.conf\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/v1/jobs/fileupload3",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"jobs",
										"fileupload3"
									]
								}
							},
							"response": []
						},
						{
							"name": "send a filedownload - private query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Query a sentiment failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.contain(\"resolv.conf\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/v1/jobs/fileupload4",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"jobs",
										"fileupload4"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a File  resource Invalid connection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Failed to create a resource\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Trucker2-fileupload5.json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"resourcename\": \"fileupload5\",\r\n        \"type\": \"File-SFTP\",\r\n        \"restmethod\": \"POST\",\r\n        \"credentialname\": \"sftpconnect3\",\r\n        \"source\": \"upload\",\r\n        \"source_path\": \"/home/trucker/dt2/datatrucker/.gitignore\",\r\n        \"source_type\": \"file\",\r\n        \"target_path\": \"/upload/.gitignore\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/api/v1/resources",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "send a filedownload - password query over invalid connection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(false);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Query a sentiment failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errorMsg).to.have.property('code').to.eql(\"ERR_GENERIC_CLIENT\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/v1/jobs/fileupload5",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"jobs",
										"fileupload5"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "folder",
					"item": [
						{
							"name": "create a folder resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Failed to create a resource\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Trucker2-folderupload1.json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"resourcename\": \"folderupload1\",\r\n        \"type\": \"File-SFTP\",\r\n        \"restmethod\": \"POST\",\r\n        \"credentialname\": \"sftpconnect1\",\r\n        \"source\": \"upload\",\r\n        \"source_path\": \"/tmp/trucker\",\r\n        \"source_type\": \"folder\",\r\n        \"target_path\": \"/upload/keys\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/api/v1/resources",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a folder resource download",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Failed to create a resource\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Trucker2-folderupload2.json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"resourcename\": \"folderupload2\",\r\n        \"type\": \"File-SFTP\",\r\n        \"restmethod\": \"POST\",\r\n        \"credentialname\": \"sftpconnect1\",\r\n        \"source\": \"download\",\r\n        \"target_path\": \"/tmp/trucker1\",\r\n        \"source_type\": \"folder\",\r\n        \"source_path\": \"/upload/keys\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/api/v1/resources",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a folder private resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Failed to create a resource\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data').to.contains(\"GET-Trucker2-folderupload3.json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"resourcename\": \"folderupload3\",\r\n        \"type\": \"File-SFTP\",\r\n        \"restmethod\": \"GET\",\r\n        \"credentialname\": \"sftpconnect2\",\r\n        \"source\": \"upload\",\r\n        \"source_path\": \"/tmp/trucker\",\r\n        \"source_type\": \"folder\",\r\n        \"target_path\": \"/home/foo/upload/keys\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/api/v1/resources",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a folder  private resource download",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Failed to create a resource\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data').to.contains(\"GET-Trucker2-folderupload4.json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"resourcename\": \"folderupload4\",\r\n        \"type\": \"File-SFTP\",\r\n        \"restmethod\": \"GET\",\r\n        \"credentialname\": \"sftpconnect2\",\r\n        \"source\": \"download\",\r\n        \"target_path\": \"/tmp/trucker2\",\r\n        \"source_type\": \"folder\",\r\n        \"source_path\": \"/home/foo/upload/keys\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/api/v1/resources",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "send a folder upload - password query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Query a sentiment failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/v1/jobs/folderupload1",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"jobs",
										"folderupload1"
									]
								}
							},
							"response": []
						},
						{
							"name": "send a folder upload - private query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Query a sentiment failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/v1/jobs/folderupload2",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"jobs",
										"folderupload2"
									]
								}
							},
							"response": []
						},
						{
							"name": "send a folder download - password query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Query a sentiment failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/v1/jobs/folderupload3",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"jobs",
										"folderupload3"
									]
								}
							},
							"response": []
						},
						{
							"name": "send a filedownload - private query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Query a sentiment failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/v1/jobs/folderupload4",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"jobs",
										"folderupload4"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a folder   resource Invalid connection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Failed to create a resource\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Trucker2-fileupload5.json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"resourcename\": \"fileupload5\",\r\n        \"type\": \"File-SFTP\",\r\n        \"restmethod\": \"POST\",\r\n        \"credentialname\": \"sftpconnect3\",\r\n        \"source\": \"upload\",\r\n        \"source_path\": \"/home/trucker/dt2/datatrucker/.gitignore\",\r\n        \"source_type\": \"file\",\r\n        \"target_path\": \"/upload/.gitignore\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/api/v1/resources",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "send a folder download - password query over invalid connection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"pre requs\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reqCompleted).to.eql(false);\r",
											"    pm.expect(jsonData).to.have.property('date');\r",
											"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
											"    pm.expect(jsonData).to.have.property('reqID');\r",
											"});\r",
											"pm.test(\"Query a sentiment failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errorMsg).to.have.property('code').to.eql(\"ERR_GENERIC_CLIENT\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/v1/jobs/fileupload5",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"v1",
										"jobs",
										"fileupload5"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "IOT-Proxy",
			"item": [
				{
					"name": "Login admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"pm.environment.set(\"Token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"godmode\",\n\t\"password\": \"Secret@123\",\n\t\"tenant\": \"Admin\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						},
						"description": "Extends the life of a given token "
					},
					"response": []
				},
				{
					"name": "create a proxy resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Admin-proxy1.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"proxy1\",\r\n        \"type\": \"IOT-Proxy\",\r\n        \"restmethod\": \"POST\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "excute as proxy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"test data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.body).to.have.property('name').to.contains(\"bella\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"method\": \"get\",\r\n  \"url\": \"https://api.agify.io/?name=bella\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/proxy1",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"proxy1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Block",
			"item": [
				{
					"name": "Login admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"pm.environment.set(\"Token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"godmode\",\n\t\"password\": \"Secret@123\",\n\t\"tenant\": \"Admin\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						},
						"description": "Extends the life of a given token "
					},
					"response": []
				},
				{
					"name": "create a block resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Admin-block.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"block\",\r\n        \"type\": \"Block\",\r\n        \"restmethod\": \"POST\",\r\n        \"resourcelinkedmethod\": \"POST\",\r\n        \"resourcelink\": \"proxy1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "excute as Block",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"test data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0].body).to.have.property('name').to.contains(\"bella\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"when\": true,\r\n  \"url\": \"https://api.agify.io/?name=bella\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/block",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"block"
							]
						}
					},
					"response": []
				},
				{
					"name": "excute as Block when false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"test data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"when\": false,\r\n  \"resource\": \"proxy1\",\r\n  \"restmethod\": \"POST\",\r\n  \"method\": \"get\",\r\n  \"url\": \"https://api.agify.io/?name=bella\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/block",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"block"
							]
						}
					},
					"response": []
				},
				{
					"name": "excute as Block loop",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"test data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0].body).to.have.property('name').to.contains(\"bella\");\r",
									"    pm.expect(jsonData.data[1].body).to.have.property('status').to.contains(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"when\": true,\r\n  \"loop\" : [\r\n      {\r\n            \"method\": \"get\",\r\n            \"url\": \"https://api.agify.io/?name=bella\"\r\n      },      {\r\n            \"method\": \"get\",\r\n            \"url\": \"https://dog.ceo/api/breeds/image/random\"\r\n      }\r\n  ] \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/block",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"block"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Block Chain",
			"item": [
				{
					"name": "Login admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"pm.environment.set(\"Token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"godmode\",\n\t\"password\": \"Secret@123\",\n\t\"tenant\": \"Admin\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/api/v1/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						},
						"description": "Extends the life of a given token "
					},
					"response": []
				},
				{
					"name": "create a resource echo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contain(\"GET-Admin-echo1.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"echo1\",\r\n        \"type\": \"Util-Echo\",\r\n        \"restmethod\": \"GET\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a chain resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Admin-basicchain.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"basicchain\",\r\n        \"type\": \"Chain\",\r\n        \"restmethod\": \"POST\",\r\n        \"chain\": [\r\n          {\r\n            \"stub\": \"sentiment2\",\r\n            \"method\": \"POST\",\r\n            \"datacontent\": {\r\n              \"statement\": \"$request|$.msg\"\r\n            },\r\n            \"register\": \"sentimentresult\"\r\n          },\r\n          {\r\n            \"stub\": \"echo1\",\r\n            \"method\": \"GET\",\r\n            \"datacontent\": {\r\n              \"message\": \"$sentimentresult|$.calculation\",\r\n              \"token\": \"$sentimentresult|$.tokens\" \r\n            }\r\n          }\r\n        ]\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "excute as Chain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"test data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.message);\r",
									"    pm.expect(jsonData.data.token);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"msg\": \"Cats are good\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/basicchain",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"basicchain"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a block chain resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Admin-block2.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"block2\",\r\n        \"type\": \"Block\",\r\n        \"restmethod\": \"POST\",\r\n        \"resourcelinkedmethod\": \"POST\",\r\n        \"resourcelink\": \"basicchain\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "excute as Block Chain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"test data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0].message[0]).to.have.property('good');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"when\": true,\r\n  \"loop\":[\r\n      {\r\n          \"msg\": \"Cats are good\"\r\n      },\r\n      {\r\n          \"msg\": \"Dogs are bad\"\r\n      }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/block2",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"block2"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a chain block chain resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"Failed to create a resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data').to.contains(\"POST-Admin-chainblockchain.json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"resourcename\": \"chainblockchain\",\r\n        \"type\": \"Chain\",\r\n        \"restmethod\": \"POST\",\r\n        \"chain\": [\r\n          {\r\n            \"stub\": \"sentiment2\",\r\n            \"method\": \"POST\",\r\n            \"datacontent\": {\r\n              \"statement\": \"$request|$.msg\"\r\n            },\r\n            \"register\": \"sentimentresult\"\r\n          },\r\n          {\r\n            \"stub\": \"block2\",\r\n            \"method\": \"POST\",\r\n            \"datacontent\": {\r\n              \"msg\": \"$request|$.msg\",\r\n              \"when\": true         \r\n            }\r\n          }\r\n        ]\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/resources",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "excute as Chain block chain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pre requs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reqCompleted).to.eql(true);\r",
									"    pm.expect(jsonData).to.have.property('date');\r",
									"    pm.expect(jsonData.serverID).to.eql(pm.globals.get(\"SERVER\"));\r",
									"    pm.expect(jsonData).to.have.property('reqID');\r",
									"});\r",
									"pm.test(\"test data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0].message[1]).to.have.property('cats');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"msg\": \"Cats are good\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/v1/jobs/chainblockchain",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"chainblockchain"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}